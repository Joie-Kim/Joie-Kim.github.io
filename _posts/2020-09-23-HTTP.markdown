---
title: "HTTP"
layout: post
date: 2020-09-23 15:30
tag:
- 용어_정리
hidden : false
star: false
category: blog
author: Joie-Kim
description: 배운 것을 기록하는 습관! ✍️
---
## 🤨 HTTP란?

HTTP는 **Hyper Text Transfer Protocol**의 약자로 HTML 문서와 같은 리소스들을 가져올 수 있도록 해주는 프로토콜이다. HTTP는 웹에서 이루어지는 모든 데이터 교환의 기초이다.

```
프로토콜
: 컴퓨터 내부에서 또는 컴퓨터 사이에서 데이터의 교환 방식을 정의하는 규칙 체계
```

클라이언트와 서버는 개별적인 메시지 교환에 의해 통신한다. <u>클라이언트에 의해 전송되는 메시지</u>를 **요청(request)**이라고 부르며, 그에 대한 <u>서버의 메시지</u>를 **응답(response)**이라고 부른다. 각각의 개별적인 요청은 서버로 보내지며, 서버는 요청을 처리하고 응답을 제공한다. 

---

## 💌 HTTP 메시지

HTTP 메시지의 두 가지 타입인 요청과 응답은 각자의 형식을 가지고 있다.

### (1) 요청(request)

![image](/assets/200923/request_message.jpeg)

**1. Request Line**
- Method : HTTP 메소드<br>
        보통 클라이언트가 수행하고자 하는 동작을 정의한 GET, POST 같은 동사나, OPTIONS나 HEAD와 같은 명사이다. (따로 정리할 예정!)

- Path : 가져오려는 리소스의 경로<br>
        프로토콜, 도메인 또는 TCP 포트와 같은 요소들을 제거한 리소스의 URL이다.

- Version of the protocol : HTTP 프로토콜의 버전

**2. Request Headers**<br>
요청에 대한 meta 정보를 담고 있으며, key:value 값으로 되어 있다.

**3. Blank Line**<br>
요청에 대한 meta 정보가 전송 됨을 알린다.

**4. Request Message Body**<br>
요청의 실제 메시지(내용)이 들어있으며, XML이나 JSON 데이터가 들어갈 수 있다. GET은 body가 대부분 없다.

### (2) 응답(response)

![image](/assets/200923/response_message.jpeg)

**1. Status Line**
- Version of the protocol : HTTP 프로토콜의 버전
- Status code : 요청의 성공 여부와 그 이유를 나타내는 상태 코드

> **HTTP 응답 상태 코드?**<br>
특정 HTTP 요청이 성공적으로 완료 되었는지 여부를 나타내며,  응답은 5가지 클래스로 분류된다. (자세한 내용은 [여기](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)에서..!)<br>
(1) 정보 응답 (100 ~ 199)<br>
(2) 성공적인 응답 (200 ~ 299)<br>
(3) 리디렉션 (300 ~ 399)<br>
(4) 클라이언트 오류 (400 ~ 499)<br>
(5) 서버 오류 (500 ~ 599)<br>

- Status message : 상태 코드의 짧은 설명을 나타내는 상태 메시지 (영향력 없음)

**2. Response Headers**<br>
Request Headers와 거의 같지만, Response Headers에만 있는 값이 있다. (예를 들어, Server와 같은..)

**3. Blank Line**<br>
Request Message와 동일

**4. Response Message Body**<br>
실제 응답하는 데이터를 나타낸다.

---

## 💎 HTTP 특징

### 클라이언트-서버 프로토콜

모든 요청과 응답은 이전의 것들과는 상관없이 독립적으로 이루어진다. 즉, 모든 요청-응답 처리(transaction)이 단 한 번의 응답-요청 사이클을 가지며, 그 사이클이 끝나면 연결이 끊긴다. 따라서 해당 요청에 필요한 모든 정보를 처음부터 가져오고(fetch), 완전한 문서가 재구성된다.

### 무상태(Stateless)

HTTP는 상태를 저장하지 않기 때문에 동일한 연결(웹 브라우저)에서 연속하여 전달한 두 개의 요청 사이에는 연결고리가 없다.<br>
이런 경우, 쇼핑몰의 장바구니나 게임 스코어처럼 특정 페이지와 일관되게 상호 작용 하려는 사용자에게 문제가 될 수 있다. 예를 들어, 쇼핑몰 장바구니에 물건을 담았지만, 어떤 버튼을 하나 눌러 reload 되면 장바구니가 텅텅 비게 되는 현상을 겪을 수도 있다.<br>
HTTP는 상태를 저장하지 않지만, HTTP 쿠키를 이용해 상태가 있는 세션을 만들 수 있다.

---

### 📚 참고

[https://developer.mozilla.org/ko/docs/Web/HTTP/Overview](https://developer.mozilla.org/ko/docs/Web/HTTP/Overview)
[https://developer.mozilla.org/ko/docs/Glossary/Protocol](https://developer.mozilla.org/ko/docs/Glossary/Protocol)
[https://developer.mozilla.org/en-US/docs/Web/HTTP/Status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)
[https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies](https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies)
[https://velog.io/@rosewwross/Http-and-Request-and-Response-hok6exbnfb](https://velog.io/@rosewwross/Http-and-Request-and-Response-hok6exbnfb)